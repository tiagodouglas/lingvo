@page "/login"
@using System.ComponentModel.DataAnnotations
@using Lingvo.Presentation.Models
@inject Services.IAuthenticationService _authService
@inject Blazored.LocalStorage.ILocalStorageService _localStorage;
@inject NavigationManager _navigationManager;
@using Microsoft.AspNetCore.WebUtilities

<PageTitle>Lingvo - Login</PageTitle>

<div class="container">
    <div class="content">
        <EditForm EditContext="@editContext">
            <div class="login-form mat-elevation-z5">
                <div style="padding-bottom: 80px;">
                    @if (loading)
                    {
                        <MatProgressBar Indeterminate="true"></MatProgressBar>
                    }
                </div>
                <div style="padding-left: 20px; padding-right: 20px;">
                    <h1>Login</h1>

                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <MatTextField Label="Email" Type="text" Outlined="true" @bind-Value="loginRequest.Email" Style="width:100%; margin-bottom: 10px;" />

                    <MatTextField Label="Password" Type="password" Outlined="true" @bind-Value="loginRequest.Password" Style="width:100%" />

                    <MatButton Raised="true" Type="submit" @onclick="@Authenticate" Style="width:100%; margin-top: 20px;">Login</MatButton>

                    <a href='create-account'>Create an account</a>
                    <a href='forgot'>Forgot password?</a>

                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new LoginRequest();
    private EditContext editContext;
    private bool loading = false;

    protected override void OnInitialized()
    {
        editContext = new(loginRequest);
    }

    private async Task Authenticate()
    {
        if (editContext.Validate())
        {
            loading = true;
            await _authService.Login(loginRequest.Email, loginRequest.Password);
            loading = false;
        }

        var user = await _localStorage.GetItemAsync<User>("user");

        if (user != null)
        {
            var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
            var queryStrings = QueryHelpers.ParseQuery(uri.Query);

            if (queryStrings.TryGetValue("returnUrl", out var returnUrl))
            {
                _navigationManager.NavigateTo(returnUrl);
            }
            else
            {
                _navigationManager.NavigateTo("/");
            }
        }
    }

    public class LoginRequest
    {
        [Required(ErrorMessage = "Email cannot be empty")]
        [RegularExpression(@"^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$",
            ErrorMessage = "Email must be valid"
        )]
        public string? Email { get; set; } = string.Empty;
        [Required(ErrorMessage = "Password cannot be empty")]
        public string? Password { get; set; } = string.Empty;
    }
}