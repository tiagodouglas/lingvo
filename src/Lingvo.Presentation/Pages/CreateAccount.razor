@page "/create-account"
@using System.ComponentModel.DataAnnotations
@using Lingvo.Presentation.Models
@inject Services.IAuthenticationService _authService
@inject Blazored.LocalStorage.ILocalStorageService _localStorage;
@inject NavigationManager _navigationManager;
@inject Services.IHttpService _api;
@inject IMatToaster _toast;

<PageTitle>Lingvo - Create account</PageTitle>

<div class="container">
    <div class="content">

        <EditForm EditContext="@editContext">

            <div class="create-form mat-elevation-z5">

                <div style="padding-bottom: 80px;">
                    @if (loading)
                    {
                        <MatProgressBar Indeterminate="true"></MatProgressBar>
                    }
                </div>

                <div style="padding-left: 20px; padding-right: 20px;">
                    <h1>Create account</h1>
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <MatTextField Label="Name" Type="text" Outlined="true" @bind-Value="createAccountRequest.Name" Style="width:100%; margin-bottom: 10px;" />
                    <MatTextField Label="Email" Type="text" Outlined="true" @bind-Value="createAccountRequest.Email" Style="width:100%; margin-bottom: 10px;" />
                    <MatTextField Label="Password" Type="password" Outlined="true" @bind-Value="createAccountRequest.Password" Style="width:100%; margin-bottom: 10px;" />
                    <MatTextField Label="Confirm password" Type="password" Outlined="true" @bind-Value="createAccountRequest.Confirm" Style="width:100%; margin-bottom: 10px;" />
                    <MatButton Raised="true" Type="submit" @onclick="@Create" Style="width:100%; margin-top: 20px;">Create</MatButton>

                    <a href='login'><span class="oi oi-arrow-thick-left" aria-hidden="true"></span></a>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CreateAccountRequest createAccountRequest = new CreateAccountRequest();
    private EditContext editContext;
    private bool loading = false;

    protected override void OnInitialized()
    {
        editContext = new(createAccountRequest);
    }

    private async Task Create()
    {
        if (editContext.Validate())
        {
            loading = true;
            var response = await _api.Post<User>("/api/user", createAccountRequest);
            loading = false;

            if (response != null)
            {
                _toast.Add("Account created", MatToastType.Success);
                _navigationManager.NavigateTo("login");
            }
        }
    }

    public class CreateAccountRequest
    {
        [Required(ErrorMessage = "Name cannot be empty")]
        public string? Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email cannot be empty")]
        [RegularExpression(@"^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$",
            ErrorMessage = "Email must be valid"
        )]
        public string? Email { get; set; } = string.Empty;
        [Required(ErrorMessage = "Password cannot be empty")]
        public string? Password { get; set; } = string.Empty;
        [Required(ErrorMessage = "Confirm password cannot be empty")]
        [Compare(nameof(Password), ErrorMessage = "Passwords don't match.")]
        public string? Confirm { get; set; } = string.Empty;
    }
}